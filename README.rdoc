== TODO

* Deploy to Heroku failed; git push is too big I think with the NLP libraries..

* Get build of talon working on the CI server.  Check in that build too (maybe build to another director; unbuntu_build?)

* How to make this performant when someone requests for the first time?

  -- What about just downloading the subject/headers?  If they pass the first round of filters, then download the body?

  -- What about creating a sidekiq job (or Thread?) for each day that we need to download emails for.  So single gmail object (stor

  -- Is it possible to request multiple messages in parallel (e.msg) since this is the most time consuming?

  -- Start a bunch of sidekiq jobs to process email and download images?
  -- Use the new ActiveJob?
    -- Requires devise update ( https://github.com/plataformatec/devise/pull/3153) to get to Rails 4.2

* Why isn't this message showing up in sent?
  https://mail.google.com/mail/u/0/#sent/14803bf68ba0bd00

* The Python program will need to be recompiled under Unbuntu
  -- Is there a way to maintain both compiles?  Control by symlink?

* Cron job to schedule the sending of daily emails

* Remove an email from the list (to stop the tracking)

* Refine the "followup" scenario; when someone hasn't responded, call that out.

* Have the user specify their timeone

* Put up a minimal homepage

* Deploy to Heroku; queues running on BlueVM

* Respond to email inline?








* Implement images for the individual emails.  Can query rapportive with this gem :

  http://patrickperey.com/find-anyones-email-a-ruby-script/
  https://github.com/the4dpatrick/possible-email
  -- Done


* Create a model "EmailThread" that has_many :emails

  - The thread model contains a timestamp of the last email in the thread.
  -- Done

  - Can query the thread for followup? (one email sent from owner, no response) or response?
    (lots of emails, last email had questions in it).
    -- Done


  -- PossibleEmail returns an empty response iobject when nothing is found, but when somethign is found
     the data element is on the response object.  Querying for whether a  the data element is on the object is just weird

     -- Remove any of the puts statements. They're extraneous.
     --



    text = <<-TEXT
Hey -

Social Distortion is playing in Sacramento on Thursday, October 2nd.
http://www.socialdistortion.com/tours/

If I bought the tickets, would you want to go?

Jim
    TEXT

 require 'stanford-core-nlp'

 StanfordCoreNLP.jar_path = "/Users/aantix/dev/followup/libs/stanford-core-nlp-full/"
 StanfordCoreNLP.model_path = "/Users/aantix/dev/followup/libs/stanford-core-nlp-full/"

 new_text = text.gsub("\n", " ")
 pipeline = StanfordCoreNLP.load(:tokenize, :ssplit, :pos, :lemma, :parse, :ner, :dcoref)
 ttext    = StanfordCoreNLP::Annotation.new(new_text)
 pipeline.annotate(ttext)

 i = 0
 ttext.get(:sentences).each do |sentence|
 	  puts "#{i} - #{sentence.to_s}"
 	  i+=1
 end